
@mixin ag-icon() {
    font-family: var(--ag-icon-font-family);
    font-size: var(--ag-icon-size);
    line-height: var(--ag-icon-size);
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    
    // Better Font Rendering
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@function ag-str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1)
                + $replace
                + ag-str-replace(str-slice($string, $index
                + str-length($search)), $search, $replace);
    }
    @return $string;
}

@mixin ag-selectable($value) {
    @if $value == null {
        $value: none;
    }

    -moz-user-select: $value;
    -webkit-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

@mixin ag-inherit-text-styles() {
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
}

@mixin ag-keyboard-focus($selectors, $offset) {
    .ag-keyboard-focus {
        @each $selector in $selectors {
            .#{$selector}:focus {
                outline: none;
                &::after {
                    content: '';
                    position: absolute;
                    background-color: transparent;
                    pointer-events: none;
                    top: $offset;
                    left: $offset;
                    display: block;
                    width: calc(100% - #{$offset * 2});
                    height: calc(100% - #{$offset * 2});
                    border: 1px solid;
                    border-color: var(--ag-input-focus-border-color);
                }
            }
        }
    }
}

@mixin ag-vertical-widget-container {
    padding: var(--ag-widget-container-vertical-padding) var(--ag-widget-container-horizontal-padding);
    padding-bottom: calc(var(--ag-widget-container-vertical-padding) - var(--ag-widget-vertical-spacing));

    & > * {
        margin-bottom: var(--ag-widget-vertical-spacing);
    }
}

@mixin ag-list-item-hovered {
    .ag-list-item-hovered::after {
        content: '';
        position: absolute;
        left: 0;
        right: 0;
        height: 1px;
        background-color: var(--ag-range-selection-border-color);
    }
    .ag-item-highlight-top::after {
        top: 0;
    }
    .ag-item-highlight-bottom::after {
        bottom: 0;
    }
}

@mixin ag-card() {
    border: var(--ag-borders) var(--ag-border-color);
    
    background: var(--ag-background-color);
    border-radius: var(--ag-card-radius);
    box-shadow: var(--ag-card-shadow);
    padding: var(--ag-grid-size);
}

// Automatically generate rtl styles from provided ltr styles by
// flipping "left" and "right" in property names and values.
//
// For example:
//
// .foo {
//     @include ag-unthemed-rtl((margin-left: 10px));
// }
//
// Will emit:
//
// .ag-ltr .foo {
//   margin-left: 10px;
// }
// .ag-rtl .foo {
//   margin-right: 10px;
// }
@mixin ag-unthemed-rtl($rules) {
    @if length(nth(&, 1)) < 1 {
        @error "ag-unthemed-rtl() can't be used at the top level of a css file, only nested in a selector.";
    }
    @if str-index(nth(nth(&, 1), 1), ".ag-theme-") != null {
        @error "ag-unthemed-rtl() should not be used in a theme, use ag-theme-rtl() instead.";
    }
    .ag-ltr & {
        @each $property, $value in $rules {
            #{$property}: $value;
        }
    }
    .ag-rtl & {
        @each $property, $value in -ag-get-rtl-rules($rules) {
            #{$property}: $value;
        }
    }
}

// Like ag-unthemed-rtl, automatically generate rtl styles from provided ltr
// styles by flipping "left" and "right" in property names and values. However
// this mixin is for use in themes. Because the div with the theme class is
// outside the div with the .ag-rtl class, we need to keep the theme class
// higher than the .ag-rtl.
//
// For example:
//
// .ag-theme-xyz {
//     .foo {
//         @include ag-theme-rtl((margin-left: 10px));
//     }
// }
//
// Will emit:
//
// .ag-theme-xyz .ag-ltr .foo {
//   margin-left: 10px;
// }
// .ag-theme-xyz .ag-rtl .foo {
//   margin-right: 10px;
// }
//
// Note how the .ag-ltr class is inserted between the theme class and the rest of the selector
@mixin ag-theme-rtl($rules) {
    @if length(nth(&, 1)) < 2 {
        @error "ag-theme-rtl() can't be used at the top level of a SCSS file, only nested in a selector.";
    }
    @at-root {
        #{-ag-insert-class-after-theme(&, ".ag-ltr")} {
            @each $property, $value in $rules {
                #{$property}: $value;
            }
        }
        #{-ag-insert-class-after-theme(&, ".ag-rtl")} {
            @each $property, $value in -ag-get-rtl-rules($rules) {
                #{$property}: $value;
            }
        }
    }
}

// invert rules e.g. (border-right-color: red) becomes (border-left-color: red)
@function -ag-get-rtl-rules($ltr-rules) {
    $rtl-rules: ();
    @each $property, $value in $ltr-rules {
        @if str-index($property, "-right") {
            $rtl-property: ag-str-replace($property, "-right", "-left");
            $rtl-rules: map-merge($rtl-rules, ($rtl-property: $value));
        }
        @else if str-index($property, "-left") {
            $rtl-property: ag-str-replace($property, "-left", "-right");
            $rtl-rules: map-merge($rtl-rules, ($rtl-property: $value));
        }
        @else if $property == "right" {
            $rtl-rules: map-merge($rtl-rules, (left: $value));
        }
        @else if $property == "left" {
            $rtl-rules: map-merge($rtl-rules, (right: $value));
        }
        @else if $value == "right" {
            $rtl-rules: map-merge($rtl-rules, ($property: left));
        }
        @else if $value == "left" {
            $rtl-rules: map-merge($rtl-rules, (property: right));
        }
        @else {
            @error "ag-get-rtl-rules doesn't know how to process the \"#{$property}\" property"
        }
    }
    @return $rtl-rules;
}

@function -ag-insert-class-after-theme($selectors, $class) {
    // this needs to do a 2-level loop, because the selector list returned by & in Sass is a 2D list,
    // e.g.  .foo .bar, .foo .baz { ... } is ((".foo", ".bar"), (".foo", ".baz"))
    $selector-list: ();
    @each $selector in $selectors {
        $result: ();
        @for $i from 1 through length($selector) {
            $item: nth($selector, $i);
            $result: append($result, $item);
            @if $i == 1 {
                $result: append($result, $class);
            }
        }
        $selector-list: append($selector-list, $result, comma);
    }
    @return $selector-list;
}
